{"version":3,"sources":["store/todoModel.js","store/todoStore.js","components/todoEntry.js","components/todoItem.js","components/todoItems.js","components/todoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","todos","remove","decorate","observable","toggle","action","destroy","TodoStore","lastID","displayType","type","res","push","filter","item","addTodo","Todostore","TodoEntry","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleKeydown","event","keyCode","state","value","preventDefault","todoStore","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","placeholder","Component","TodoItem","observer","_Component","apply","arguments","inherits","createClass","key","todo","checked","onToggle","onClick","onDestroy","TodoItems","map","todoItem","Math","random","toString","Footer","destroyAllCompleted","showTasks","countCompleted","forEach","el","length","onDisplay","onDesroyAllCompleted","find","App","todoEntry","todoItems","todoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6ef2479.chunk.js","sourcesContent":["import { observable, decorate, action } from \"mobx\";\r\n\r\nexport default class TodoModel {\r\n  store\r\n  title\r\n  completed\r\n  id\r\n  \r\n  constructor(store, title, completed, id) {\r\n    this.store = store;\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.id = id;\r\n  }\r\n\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n\r\n  destroy() {\r\n\t\tthis.store.todos.remove(this);\r\n  }\r\n  \r\n}\r\n\r\ndecorate(TodoModel, {\r\n  title: observable,\r\n  completed: observable,\r\n  toggle: action,\r\n  destroy: action\r\n});","import { observable, decorate, action } from \"mobx\";\r\nimport TodoModel from \"./todoModel\";\r\n\r\nclass TodoStore {\r\n  todos = [];\r\n  lastID = 0;\r\n\r\n  displayType = 'all'\r\n\r\n  showTasks(type) {\r\n    if (type === \"all\") {\r\n      this.displayType = \"all\";\r\n    }\r\n    if (type === \"completed\") {\r\n      this.displayType = \"completed\";\r\n    }\r\n    if (type === \"active\") {\r\n      this.displayType = \"active\";\r\n    }\r\n    return true\r\n  }\r\n\r\n  addTodo(title) {\r\n    let res = new TodoModel(this, title, false, this.lastID++);\r\n    this.todos.push(res);\r\n  }\r\n\r\n  destroyAllCompleted() {\r\n    this.todos = this.todos.filter(item => {\r\n      return item.completed !== true;\r\n    });\r\n  }\r\n}\r\n\r\ndecorate(TodoStore, {\r\n  todos: observable,\r\n  displayType: observable,\r\n  addTodo: action\r\n});\r\n\r\nconst Todostore = new TodoStore();\r\nexport default Todostore;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../store/todoStore\";\r\n\r\nclass TodoEntry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  handleKeydown = event => {\r\n    if (event.keyCode !== 13) {\r\n      return;\r\n    }\r\n    if (this.state.value === '') {\r\n        return;\r\n      }\r\n    event.preventDefault();\r\n    todoStore.addTodo(this.state.value);\r\n    this.setState({\r\n      value: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1 className=\"pageTitle\">{`To Do List`}</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event => {\r\n            this.setState({ value: event.target.value });\r\n          }}\r\n          onKeyDown={event => this.handleKeydown(event)}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What need to be down?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst TodoItem = observer(\r\n  class TodoItem extends Component {\r\n\r\n    onToggle() {\r\n      this.props.todo.toggle();\r\n    }\r\n    \r\n    onDestroy(){\r\n      this.props.todo.destroy()\r\n    }\r\n\r\n    render() {\r\n      const { todo } = this.props;\r\n      let checked = todo.completed ? \"checked\" : ''\r\n      let completed = todo.completed ? 'completed' : ''\r\n\r\n      return (\r\n        <li className={completed}>\r\n          <div className=\"view\">\r\n            <input\r\n              onChange={() => this.onToggle()}\r\n              type=\"checkbox\"\r\n              className=\"toggle\"\r\n              value=\"on\"\r\n              checked={checked}\r\n            />\r\n            <label>{todo.title}</label>\r\n            <button className=\"destroy\" onClick={()=> this.onDestroy()} />\r\n          </div>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./todoItem\";\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from \"../store/todoStore\";\r\n\r\nconst TodoItems = observer(\r\n  class TodoItems extends Component {\r\n    render() {\r\n      return (\r\n        <section className=\"main\">\r\n          <ul className=\"todo-list\">\r\n            {\r\n                todoStore.todos.map(todo => {\r\n                  if(todoStore.displayType === 'all'){\r\n                    return <TodoItem todo={todo} key={Math.random().toString()} />;\r\n                  }\r\n                  if(todoStore.displayType === 'completed'){\r\n                    return todo.completed ? <TodoItem todo={todo} key={Math.random().toString()} /> : ''\r\n                  }\r\n                  if(todoStore.displayType === 'active'){\r\n                    return todo.completed ? '' : <TodoItem todo={todo} key={Math.random().toString()} />\r\n                  }\r\n                  return true\r\n                })\r\n            }\r\n          </ul>\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Todostore from \"../store/todoStore\"\r\n\r\nconst Footer = observer(\r\n  class Footer extends Component {\r\n\r\n    onDesroyAllCompleted() {\r\n      this.props.todos.destroyAllCompleted()\r\n    }\r\n    onDisplay(type) {\r\n      this.props.todos.showTasks(type)\r\n    }\r\n\r\n    onActive(){\r\n      return true\r\n    }\r\n    onCompleted(){\r\n      return true\r\n    }\r\n\r\n    render() {\r\n      const { todos } = this.props;\r\n      var countCompleted = 0\r\n      todos.todos.forEach(el => {\r\n        if(el.completed === false){countCompleted++}\r\n      });\r\n\r\n      return (\r\n        <footer className=\"footer\">\r\n          <span className=\"todo-count\">\r\n            {todos.todos.length > 0 && (\r\n              <div>\r\n                <strong>{countCompleted}</strong>\r\n                <span>{(countCompleted) > 1 ? \" items \" : \" item \"}</span>\r\n                <span>left</span>\r\n              </div>\r\n            )}\r\n          </span>\r\n          <ul className=\"filters\">\r\n            <li>\r\n              <button className={Todostore.displayType === 'all' ? 'selected' : '' } onClick={ () => this.onDisplay('all')}>All</button>\r\n            </li>\r\n            <li>\r\n              <button className={Todostore.displayType === 'active' ? 'selected' : '' } onClick={ () => this.onDisplay('active')}>Active</button>\r\n            </li>\r\n            <li>\r\n              <button className={Todostore.displayType === 'completed' ? 'selected' : '' } onClick={ () => this.onDisplay('completed')}>Completed</button>\r\n            </li>\r\n          </ul>\r\n          <button\r\n            onClick={ () => this.onDesroyAllCompleted()}\r\n            className=\"clear-completed\"\r\n          >\r\n          {todos.todos.find(el=>{\r\n            return el.completed\r\n          }) && 'Clear completed'}\r\n          </button>\r\n        </footer>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport TodoEntry from \"./components/todoEntry\"\nimport TodoItems from \"./components/todoItems\"\nimport Footer from \"./components/todoFooter\"\nimport todoStore from \"./store/todoStore\";\nimport \"./App.css\";\n\nconst App = observer(\n  class App extends Component {\n    render() {\n      return (\n        <div id=\"todoapp\" className=\"todoapp\">\n          <TodoEntry />\n          <TodoItems /> \n          <Footer todos={todoStore} />         \n        </div>\n      );\n    }\n  }\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}